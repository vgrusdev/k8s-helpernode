---
# Setup OCP4 Helper Node

- hosts: all
  vars_files:
    - ../vars/main.yml
    - ../vars/ports.yml
    - ../vars/ports_ext.yml
  handlers:
  - import_tasks: ../handlers/main.yml

  # According to RFC 952, and RFC 1123, also RFC about SRV records should be taken into account)
  # underscores in hostnames are illegal.
  pre_tasks:
  - name: validate hostnames
    import_tasks: validate_host_names.yaml

  tasks:
  - name: generate ssh keys
    import_tasks: generate_ssh_keys.yaml
    when: ssh_gen_key

  - name: set setup facts
    include: set_facts_.yaml

  - name: Install needed packages
    package:
      name: "{{ packages }}"
      state: present

  - name: Remove existing config files
    import_tasks: remove_old_config_files.yaml
    when: remove_old_config_files

  - name: Write out dhcp file
    template:
      src: ../templates/dhcpd.conf.j2
      dest: /etc/dhcp/dhcpd.conf
    notify:
      - restart dhcpd
    when: not staticips
#    when: not staticips and not uefi
#
#  - name: Write out dhcp file (UEFI)
#    template:
#      src: ../templates/dhcpd-uefi.conf.j2
#      dest: /etc/dhcp/dhcpd.conf
#    notify:
#      - restart dhcpd
#    when: not staticips and uefi

  - name: Setup named configuration files
    block:
    - name: Write out named file
      template:
        src: ../templates/named.conf.j2
        dest: /etc/named.conf
      notify:
        - restart bind
    
    - name: Installing DNS Serialnumber generator
      copy:
        src: ../files/set-dns-serial.sh
        dest: /usr/local/bin/set-dns-serial.sh
        mode: '0555'

    - name: Set zone serial number
      shell: "/usr/local/bin/set-dns-serial.sh"
      register: dymanicserialnumber

    - name: Setting serial number as a fact
      set_fact:
        serialnumber: "{{ dymanicserialnumber.stdout }}"

    - name: Write out "{{ dns.domain | lower }}" zone file
      template:
        src: ../templates/zonefile.j2
        dest: /var/named/zonefile.db
        mode: '0644'
      notify:
        - restart bind

    - name: Write out reverse zone file
      template:
        src: ../templates/reverse.j2
        dest: /var/named/reverse.db
        mode: '0644'
      notify:
        - restart bind

    - name: Write out haproxy config file
      template:
        src: ../templates/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify:
        - restart haproxy
      when: dns.lb_ipaddr is not defined or dns.lb_ipaddr == helper.ipaddr  
    when: dhcp.dns is not defined or dhcp.dns == helper.ipaddr 

  - name: Copy httpd conf file
    copy:
      src: ../files/httpd.conf
      dest: /etc/httpd/conf/httpd.conf
    notify:
      - restart httpd
    when: helper_packages.httpd

  - name: Start firewalld service
    systemd:
      name: firewalld
      state: started
      enabled: yes

  - name: Open up firewall ports
    firewalld:
      permanent: yes
      immediate: yes
      state: enabled
      port: "{{ item[0] }}"
    delegate_to: "{{ item[1] }}"
    run_once: true
    with_nested:
      - "{{ ports }}"
      - "{{ ansible_play_batch }}"

  - name: Open up external firewall ports
    firewalld:
      permanent: yes
      immediate: yes
      state: enabled
      port: "{{ item[0] }}"
      zone: external
    delegate_to: "{{ item[1] }}"
    run_once: true
    with_nested:
      - "{{ ports_ext }}"
      - "{{ ansible_play_batch }}"

  - name: Best effort SELinux repair - DNS
    shell: "restorecon -vR /var/named || true"

  - name: Best effort SELinux repair - Apache
    shell: "restorecon -vR /var/www/html || true"

  - name: Create NFS export directory
    file:
      path: /export
      state: directory
      mode: 0777
      owner: "{{ owner }}"
      group: "{{ group }}"
    notify:
      - restart nfs
    when: helper_packages.nfsd

  - name: Copy NFS export conf file
    copy:
      src: ../files/nfs-exports
      dest: /etc/exports
    notify:
      - restart nfs
    when: helper_packages.nfsd

  - name: SEBool allow haproxy connect any port
    seboolean:
      name: haproxy_connect_any
      state: yes
      persistent: yes
    notify:
      - restart haproxy
    when: dns.lb_ipaddr is not defined or dns.lb_ipaddr == helper.ipaddr 

  - name: Systemd daemon reload
    systemd:
      daemon_reload: yes
    when: not staticips

  - name: Starting services
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - "{{ services }}"

  - name: Starting DHCP/PXE services
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - dhcpd
    when: not staticips
#
  - name: Copy info script over
    template:
      src: ../templates/checker.sh.j2
      dest: /usr/local/bin/helpernodecheck
      owner: root
      group: root
      mode: 0555

  - name: Chrony configuration
    block:
    - name: Create folder for additional machineconfig
      file:
        path: "{{ machineconfig_path }}"
        state: directory

    - name: Create temporary chrony.conf file
      template:
        src: ../templates/chrony.conf.j2
        dest: /tmp/chrony.conf.tmp

    - name: slurp contents of temporary chrony.conf file
      slurp:
        src: /tmp/chrony.conf.tmp
      register: chronybase64

    - name: Generate Chrony machineconfig
      template:
        src: ../templates/chrony-machineconfig.j2
        dest: "{{ machineconfig_path }}/99-{{item}}-chrony-configuration.yaml"
      loop:
        - master
    - name: Generate Chrony machineconfig
      template:
        src: ../templates/chrony-machineconfig.j2
        dest: "{{ machineconfig_path }}/99-{{item}}-chrony-configuration.yaml"
      loop:
        - worker
      when:
        - workers is defined
        - workers | length > 0
    when: chronyconfig.enabled

  - name: Removing files that are not needed
    file:
      path: /usr/local/bin/README.md
      state: absent

#  - name: Create helm source directory
#    file:
#      path: "{{ item }}"
#      state: directory
#      mode: 0755
#    with_items:
#      - /usr/local/src/helm
#
#  - name: Downloading helm source binary tarball
#    get_url:
#      url: "{{ helm_source }}"
#      dest: /usr/local/src/helm/helm-client.tar.gz
#
#  - name: Unarchiving helm tarball
#    unarchive:
#      src: /usr/local/src/helm/helm-client.tar.gz
#      dest: /usr/local/src/helm
#      remote_src: yes
#
#  - name: Copy helm cli to bin directory for amd64
#    copy:
#      src: /usr/local/src/helm/linux-amd64/helm
#      dest: /usr/local/bin/helm
#      owner: root
#      group: root
#      mode: '0755'
#      remote_src: true
#    when: not ppc64le
#
#  - name: Copy helm cli to bin directory for ppc64le
#    copy:
#      src: /usr/local/src/helm/linux-ppc64le/helm
#      dest: /usr/local/bin/helm
#      owner: root
#      group: root
#      mode: '0755'
#      remote_src: true
#    when: ppc64le
#
#  - name: Downloading filetranspiler source
#    git:
#      repo: https://github.com/ashcrow/filetranspiler
#      dest: /usr/local/src/filetranspiler
#    when: install_filetranspiler
#
#  - name: Building filetranspiler
#    shell: "podman build /usr/local/src/filetranspiler -t filetranspiler:latest"
#    when: install_filetranspiler
#
#  - name: Installing filetranspiler
#    copy:
#      src: ../files/filetranspiler
#      dest: /usr/local/bin/filetranspiler
#      mode: '0555'
#    when: install_filetranspiler

  - name: Set the local resolv.conf file
    template:
      src: ../templates/resolv.conf.j2
      dest: /etc/resolv.conf

  - name: Get network device system name
    shell: "nmcli -t dev show {{ networkifacename }} | grep GENERAL.CONNECTION | cut -d: -f2"
    register: devicesystemname

  - name: Setting network device system name as a fact
    set_fact:
      dsname: "{{ devicesystemname.stdout }}"

  - name: Setting DNS server ip on network interface "{{ dsname }}" to 127.0.0.1
    shell: 'nmcli con mod "{{ dsname }}" ipv4.dns 127.0.0.1'

  - name: Setting DNS search path on network interface "{{ dsname }}" to "{{ dns.clusterid }}.{{ dns.domain | lower }}"
    shell: 'nmcli con mod  "{{ dsname }}" ipv4.dns-search {{ dns.clusterid }}.{{ dns.domain | lower }}'

  - name: Setup external interface attributes
    block:

    - name: Get external network device system name
      shell: "nmcli -t dev show {{ high_availability_ext.networkifacename }} | grep GENERAL.CONNECTION | cut -d: -f2"
      register: ext_devicesystemname

    - name: Setting iexternal network device system name as a fact
      set_fact:
        ext_dsname: "{{ ext_devicesystemname.stdout }}"

    - name: Diasable dns4 auto from dhcp
      shell: 'nmcli con mod "{{ ext_dsname }}" ipv4.ignore-auto-dns yes'

    - name: Assign interface to external zone
      shell: 'nmcli con mod "{{ ext_dsname }}" connection.zone external'

    when: high_availability_ext.networkifacename is defined

  - name: Restarting NetworkManager
    service:
      name: "{{ item }}"
      state: restarted
    with_items:
      - NetworkManager

  - name: Setup keepalived service
    when: high_availability is defined
    import_tasks: setup_keepalived.yaml

#  - name: Setup Local Registry
#    when: setup_registry.deploy
#    block:
#    - name: Install registry packages
#      package:
#        name: "{{ registry }}"
#        state: present
#
#    - name: Setup Registry
#      import_tasks: setup_registry.yaml

  - name: Enable restart always for critical services
    include_tasks: restart_config.yaml
    loop: "{{ critical_services }}"

  - name: Disable named service
    service:
      name: named
      state: stopped
    when: dhcp.dns is defined and dhcp.dns != helper.ipaddr

  - name: Disable haproxy service
    service:
      name: haproxy
      state: stopped
    when: (dhcp.dns is defined and dhcp.dns != helper.ipaddr) or (dns.lb_ipaddr is defined and dns.lb_ipaddr != helper.ipaddr)

  - name:  Information about this install
    debug:
      msg:
        - "Please run /usr/local/bin/helpernodecheck for information"

